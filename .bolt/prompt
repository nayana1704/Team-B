Backend Prompt for Restaurant Website
Tech Stack
Backend Framework: Node.js with Express.js
Database: PostgreSQL (with Sequelize/Prisma ORM for clean schema design and queries)
Authentication: JWT-based authentication (for login sessions)
Real-Time Communication: WebSockets (via Socket.IO) or Server-Sent Events (SSE) for waiter notifications, order updates, and AI chatbot responses.
AI Chatbot: Integrated with an NLP engine (e.g., OpenAI API or Rasa) + weather/time APIs.
Media Handling: Videos/images of food items stored in cloud storage (e.g., AWS S3, Cloudinary).
Payment Gateway: UPI integration (Razorpay/PhonePe API) + card/cash notifications.
Speech-to-Text: Utilize browser’s Web Speech API (frontend) + backend support for voice instruction storage.

Core Backend Modules and Their Working
1. Authentication & Session Management
Login API:
POST /auth/login – Takes name and phone number.
If the phone number is not in DB, create a new customer entry and assign a unique session_id.
Generate a JWT token to identify the customer session.
Associate table number with session based on QR code scanned.
Store session in Redis for quick table-to-user mapping.

2. Menu & Food Items Management
Menu API Endpoints:
GET /menu – Returns full menu with categories, filters, and tags.
GET /menu/:id – Returns detailed info about a food item (video URL, price, calories, spice/sauce levels, preparation time, availability status, health tag).
GET /menu?filters= – Supports filters like price under X, Today’s specials, seasonal items, etc.
GET /menu/combos – Fetches all special combos.
Veg Mode: Add a query param like ?veg=true to return only vegetarian items.
Menu data stored in food_items table with fields: bash CopyEdit   id, name, category, description, price, calories, spice_level, healthy_tag, availability, video_url, prep_time
  

3. AI Chatbot Module
Backend AI Workflow:
API Endpoint: POST /chatbot/query
Input: { userQuery: string, session_id: string }
Fetch user session, current weather (via weather API), current time (server time).
Use NLP model to parse query and recommend dishes accordingly.
Example logic:
If user query mentions "south indian" + "evening + cold" → Suggest bajji with tea.
Supports both text and speech input (speech converted to text on frontend).

4. Search and Filters
Search API:
GET /search?q= – Queries food_items table using fuzzy search (PostgreSQL full-text search).
Speech Search: Backend treats voice search as text queries, same endpoint.
Filters API:
GET /menu?price_lt=200&healthy=true&alcohol=false

5. Cart Management
Cart APIs:
POST /cart/add – Adds food item to user’s cart.
PATCH /cart/update – Updates quantity or instructions.
DELETE /cart/remove – Removes an item.
GET /cart – Returns all cart items with total price.
Cart stored per session (cart_items table linked to session_id).
Chef Instructions:
Voice or text instructions stored as text/audio file (if audio) linked to cart item.
instructions field in cart_items table.

6. Order Management & Real-Time Tracking
Place Order:
POST /order/place – Moves all items from cart to orders table with status = Placed.
orders table schema: scss CopyEdit   order_id, session_id, items (JSON), status (Placed, Preparing, Delivered), timestamp
  
Trigger WebSocket events to update Your Orders page in real-time.
Order Tracker:
GET /order/:id/status – Returns current order status.
Status updates (Preparing → Ready → Delivered) pushed via WebSocket to frontend.

7. Call Waiter Button
Workflow:
POST /waiter/call – Sends waiter notification with table number.
Real-time updates through WebSocket:
Notify waiter’s app: “Table X calling you”.
Return status updates: waiter acknowledged/on the way.
Use Redis Pub/Sub for waiter notification propagation.

8. Payment & Bill Splitting
Close Bill API:
POST /bill/close – Generates bill from orders.
Supports split bill logic:
Divide cost among number of people and generate individual UPI links.
Payment Status:
UPI/Card → Track payment success.
Cash → Notify waiter with POST /waiter/cash-collect.

9. Feedback System
Feedback API:
POST /feedback – Save user rating, comments in feedback table.
Link feedback to order/session.

10. Admin/Waiter Dashboard APIs (Future Scope)
Waiter receives real-time notifications about:
Call waiter requests.
Payment collection for cash/card.
Admin can manage menu, see active orders, etc.

Key Backend Considerations
Scalability: Use Redis caching for menu & session data.
Media streaming: Video URLs preloaded from CDN.
Security: Rate limiting for APIs, HTTPS, JWT expiry, SQL injection protection.
Testing: Unit tests for all critical APIs (Jest).
AI Optimization: Chatbot should be asynchronous with fallback responses if AI fails.



Database Schema (PostgreSQL)
We will design the schema with referential integrity and normalized tables to handle users, menu, combos, orders, payments, feedback, and waiter calls.

1. Users & Sessions
users
Stores customer information.
CREATE TABLE users (
  user_id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  phone VARCHAR(15) NOT NULL UNIQUE,
  created_at TIMESTAMP DEFAULT NOW()
);
 tables
Each restaurant table (linked to QR code).
sql
CopyEdit
CREATE TABLE tables (
  table_id SERIAL PRIMARY KEY,
  table_number VARCHAR(10) NOT NULL UNIQUE,
  qr_code_url TEXT NOT NULL,
  is_active BOOLEAN DEFAULT TRUE
);
sessions
Links a user with a table during their visit.
sql
CopyEdit
CREATE TABLE sessions (
  session_id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
  table_id INT REFERENCES tables(table_id) ON DELETE CASCADE,
  jwt_token TEXT NOT NULL,
  status VARCHAR(20) DEFAULT 'active', -- active, closed
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

2. Menu Management
categories
Categories like "Biryani", "Desserts", etc.
sql
CopyEdit
CREATE TABLE categories (
  category_id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  description TEXT
);
menu_items
Holds all food items.
sql
CopyEdit
CREATE TABLE menu_items (
  item_id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  category_id INT REFERENCES categories(category_id) ON DELETE SET NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  calories INT,
  spice_level VARCHAR(20), -- low, medium, high
  healthy_tag BOOLEAN DEFAULT FALSE,
  is_veg BOOLEAN DEFAULT FALSE,
  is_available BOOLEAN DEFAULT TRUE,
  video_url TEXT,
  prep_time INT, -- minutes
  created_at TIMESTAMP DEFAULT NOW()
);
combos
Special combo deals.
sql
CopyEdit
CREATE TABLE combos (
  combo_id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  video_url TEXT,
  is_available BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE combo_items (
  combo_id INT REFERENCES combos(combo_id) ON DELETE CASCADE,
  item_id INT REFERENCES menu_items(item_id) ON DELETE CASCADE,
  PRIMARY KEY (combo_id, item_id)
);

3. Cart Management
cart_items
Temporary cart storage per session.
sql
CopyEdit
CREATE TABLE cart_items (
  cart_item_id SERIAL PRIMARY KEY,
  session_id INT REFERENCES sessions(session_id) ON DELETE CASCADE,
  item_id INT REFERENCES menu_items(item_id) ON DELETE CASCADE,
  quantity INT DEFAULT 1,
  custom_instruction TEXT,
  spice_adjustment VARCHAR(20), -- low, medium, high
  sauce_adjustment VARCHAR(20), -- low, medium, high
  voice_instruction_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

4. Order Management
orders
Stores the order placed by a customer.
sql
CopyEdit
CREATE TABLE orders (
  order_id SERIAL PRIMARY KEY,
  session_id INT REFERENCES sessions(session_id) ON DELETE CASCADE,
  status VARCHAR(20) DEFAULT 'Placed', -- Placed, Preparing, Ready, Delivered
  total_amount DECIMAL(10,2),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
order_items
Stores individual food items under an order.
sql
CopyEdit
CREATE TABLE order_items (
  order_item_id SERIAL PRIMARY KEY,
  order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
  item_id INT REFERENCES menu_items(item_id),
  quantity INT,
  price DECIMAL(10,2)
);

5. Payment Management
payments
Tracks payments.
sql
CopyEdit
CREATE TABLE payments (
  payment_id SERIAL PRIMARY KEY,
  order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
  payment_mode VARCHAR(20), -- UPI, cash, card
  amount DECIMAL(10,2) NOT NULL,
  status VARCHAR(20) DEFAULT 'pending', -- pending, success, failed
  created_at TIMESTAMP DEFAULT NOW()
);

6. Waiter Notifications
waiter_notifications
Tracks call waiter requests.
sql
CopyEdit
CREATE TABLE waiter_notifications (
  notification_id SERIAL PRIMARY KEY,
  table_id INT REFERENCES tables(table_id),
  session_id INT REFERENCES sessions(session_id),
  status VARCHAR(20) DEFAULT 'notified', -- notified, acknowledged, on_the_way, done
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

7. Feedback
feedback
Stores customer experience ratings.
sql
CopyEdit
CREATE TABLE feedback (
  feedback_id SERIAL PRIMARY KEY,
  session_id INT REFERENCES sessions(session_id) ON DELETE CASCADE,
  order_id INT REFERENCES orders(order_id),
  rating INT CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

8. Manager Controls
manager_controls
Enables manager to toggle seasonal specials, availability, etc.
sql
CopyEdit
CREATE TABLE manager_controls (
  control_id SERIAL PRIMARY KEY,
  item_id INT REFERENCES menu_items(item_id) ON DELETE CASCADE,
  is_seasonal BOOLEAN DEFAULT FALSE,
  is_special BOOLEAN DEFAULT FALSE,
  updated_by VARCHAR(100),
  updated_at TIMESTAMP DEFAULT NOW()
);

Relationships Overview
One user → Many sessions (one per visit).
One session → Many cart_items and orders.
One order → Many order_items.
One combo → Many menu_items (through combo_items).
One table → Many sessions and waiter calls.